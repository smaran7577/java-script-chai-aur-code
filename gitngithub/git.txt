==> What is Git?
Free & Open Source Version Control System (tools that helps to track changes in code)
-> track history
-> help to collaborate
-> free and open Source
-> easy to use

==> What is GitHub?
Website where we host repositories online

==> Using Git
-> Command Line (most popular)
-> IDE/Code Editors (like VSCode)
-> Graphical User Interface (like GitKraken)

==> These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   restore    Restore working tree files
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   diff       Show changes between commits, commit and working tree, etc
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   backfill   Download missing objects in a partial clone
   branch     List, create, or delete branches
   commit     Record changes to the repository
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   reset      Reset current HEAD to the specified state
   switch     Switch branches
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

==> Configuring Git
[git config --global user.name "username"]
[git config --global user.email "registeredEmail@email.com"]

==> Basic commands
-> Clone - Cloning a repo on our local machine [git clone <-githubRepoLink->]
-> Status - display the state of the code [git status]

==> File Status Lifecycle
untracked -> unmodified -> modified -> staged

-> add - adds new or changed files in your working directory to the Git staging area. [git add <-file name->]
-> commit - it is the record  of change [git commit -m "some message"]
-> push - upload local repo content to remote repo [git push origin main]

-> init - used to create a new git repo 
[git init]
[git remote add origin] <-link->
[git remote -v] (to verify remote)
[git branch] (to check branch)
[git branch -M main] (to rename branch)
[git push origin main]

-> Info of all commits
[git log]

=> Workflow 
code changes -> add -> commit -> push

==> Git Branches:
In Git, a branch is like a separate workspace where you can make changes and try new ideas without affecting the main project. 
Think of it as a "parallel universe" for your code.

-> Creating a new branch 
[git branch newBranch] OR [git checkout -b newBranch]

-> To rename branch
[git branch -M main]

-> Listing all the branches 
[git branch]

-> Switching between branches
checkout is the command used to check out a branch.
Moving us from the current, to the one specified at the end of the command:
[git checkout branch2] <-Switched to branch 'branch2'->

-> To delete a branch
[git branch -d branchName]

==> Merging code
[git diff <-branchName->] to coompare commits, branches, files & more
[git merge <-branchName->] to merge 2 branches
OR Create a PR 

Pull Request : It lets you tell others about changes you've pushed to a branch ina repo on GitHub.


==> Pull Command
[git pull origin main]
used to fetch and download content from a remote repo and immediately Update
the local repo to match that content.

==> Merge Conflicts
An event that takes place when Git is unable to automatically resolve differences in code between two commits.

==> Fixing Mistakes
-> Case 1: staged changes
[git reset <-fileName->]
[git reset]

-> Case 2: commited changes (for one commit)
[git reset HEAD~1]

-> Case 3: commited changes (for many commits)
[git reset <-commit hash->]
[git reset --hard <-commit hash->]

==> What is Forking ? 
A fork is a new repo that shares code and visibility settings with the original 'upstream' repo.
For isa rough copy.


========================================================ðŸ©·